private void dgvRTS_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
{
    DateTime dteBusinessDate = default(DateTime);
    string strVoucherNumber = null;
    DataTable dtItin = null/* TODO Change to default(_) if this is not a reference type */;
    DataTable dtDity = null/* TODO Change to default(_) if this is not a reference type */;
    string strLastDayLocation = null;
    string strvouchertypeText = null;
    string strauditStatus = null;
    DataTable dtVoucherData = null/* TODO Change to default(_) if this is not a reference type */;

    try
    {
        this.Cursor = Cursors.WaitCursor;
        intItemSelected = e.RowIndex;
        if (intItemSelected >= 0)
        {
            switch (lblRTSHeader.Text)
            {
                case "Audit":
                    {
                        if (dgvRTS.SelectedRows(0).DefaultCellStyle.ForeColor == Color.Red)
                            Interaction.MsgBox("You cannot Audit a Voucher you computed.", MsgBoxStyle.Information + MsgBoxStyle.OkOnly, "RTS");
                        else
                        {
                            if (isUsingVoucherLockdown())
                            {
                                if (isVoucherOpen(strSSN, strOrderNumber))
                                    return;
                                else
                                    gRTSCommands.upd_Orders_VoucherOwner(strSSN, strOrderNumber, gSysUserName);
                            }
                            strauditStatus = GetAuditStatus(strSSN, strOrderNumber);
                            if (strauditStatus == "A" | strauditStatus == "B" | strauditStatus == "Y")
                            {
                            }
                            else
                            {
                                Interaction.MsgBox("This voucher is no longer in audit. The screen has been refreshed.");
                                this.AuditToolStripMenuItem.PerformClick();
                            }
                            m_strSysVoucherType = dgvRTS.SelectedRows(0).Cells(2).Value;
                            strTravelType = dgvRTS.SelectedRows(0).Cells(7).Value;
                            UpdateAuditedBy(strSSN, strOrderNumber);

                            switch (m_strSysVoucherType)
                            {
                                case "T":
                                case "D":
                                case "M":
                                case "S":
                                    {
                                        if (m_strSysVoucherType == "S")
                                        {
                                            dtDity = gRTSQueries.sel_DITY_SSN_PrimaryOrder(strSSN, strOrderNumber);

                                            frmPCSExpenses.gstrVoucherNumber = dtDity.Rows(0)("OriginalVoucherNumber").ToString();
                                        }

                                        frmPCSExpenses.InitComputation(strSSN, strOrderNumber, m_strSysVoucherType, "Audit");
                                        frmPCSExpenses.ShowDialog();
                                        break;
                                    }

                                case "C":
                                    {
                                        {
                                            var withBlock = frmCivPCSExpenses;
                                            withBlock.strCostCompare = "N";
                                            withBlock.InitComputation(strSSN, strOrderNumber, m_strSysVoucherType, "Audit");
                                            withBlock.ShowDialog();
                                        }

                                        break;
                                    }

                                case "5":
                                    {
                                        if (IsPCSTravelType(strTravelType))
                                        {
                                            {
                                                var withBlock = frmPCSPrecomputed;
                                                frmPCSPaymentInfo.txtSplitAmount.Text = "";
                                                // Load(frmPCSPrecomputed)
                                                withBlock.strProcessType = "Audit";
                                                withBlock.SendPersonnel(strSSN, strOrderNumber);
                                                withBlock.strVoucherType = m_strSysVoucherType;
                                                withBlock.SetVoucherType(m_strSysVoucherType);
                                                withBlock.InitForm();
                                                withBlock.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            frmPaymentInfo.txtSplitAmount.Text = "0";
                                            frmFindExpense.strProcessType = "Audit";

                                            {
                                                var withBlock = frmVoucherPrecomputed;
                                                withBlock.strVoucherType = m_strSysVoucherType;
                                                withBlock.SetVoucherType(m_strSysVoucherType);
                                                withBlock.SendPersonnel(strSSN, strOrderNumber);
                                                withBlock.InitForm();
                                                withBlock.ShowDialog();
                                            }
                                        }

                                        break;
                                    }

                                case "7":
                                    {
                                        frmFindExpense.strProcessType = "Audit";
                                        {
                                            var withBlock = frmVoucherPrecomputed;
                                            withBlock.strVoucherType = m_strSysVoucherType;
                                            withBlock.SetVoucherType(m_strSysVoucherType);
                                            withBlock.SendPersonnel(strSSN, strOrderNumber);
                                            withBlock.InitForm();
                                            withBlock.ShowDialog();
                                        }

                                        break;
                                    }

                                case "L":
                                    {
                                        {
                                            var withBlock = frmPCSPrecomputed;
                                            frmPCSPaymentInfo.txtSplitAmount.Text = "";
                                            withBlock.strProcessType = "Audit";
                                            withBlock.SendPersonnel(strSSN, strOrderNumber);
                                            withBlock.strVoucherType = m_strSysVoucherType;
                                            withBlock.SetVoucherType(m_strSysVoucherType);
                                            withBlock.InitForm();
                                            withBlock.ShowDialog();
                                        }

                                        break;
                                    }

                                case "R":
                                    {
                                        {
                                            var withBlock = frmRita;
                                            withBlock.strVoucherType = m_strSysVoucherType;
                                            withBlock.strProcessType = "Audit";
                                            withBlock.strSSN = strSSN;
                                            withBlock.strPrimaryOrder = strOrderNumber;
                                            withBlock.SendPersonnel(strSSN, strOrderNumber);
                                            withBlock.InitForm();
                                            withBlock.ShowDialog();
                                        }

                                        break;
                                    }

                                default:
                                    {
                                        if (strTravelType == "C")
                                        {
                                            {
                                                var withBlock = frmCivPrecomputed;
                                                withBlock.strProcessType = "Audit";
                                                withBlock.SetVoucherType("P");
                                                withBlock.SendPersonnel(strSSN, strOrderNumber);
                                                withBlock.InitForm();
                                                withBlock.ShowDialog();
                                            }
                                        }
                                        else if (isGroupVoucher(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value.ToString()))
                                        {
                                            {
                                                var withBlock = frmExpenses;
                                                withBlock.GroupVoucher = true;
                                                withBlock.GroupVoucherID = lngGroupVoucherID;
                                                withBlock.GroupVoucherPrimaryOrder = strGroupVoucherPrimaryOrder;
                                                withBlock.GroupVoucherPrimarySSN = strGroupVoucherPrimarySSN;
                                                withBlock.GroupVoucherCount = lngGroupVoucherCount;
                                                withBlock.Execute(strSSN, strOrderNumber, m_strSysVoucherType, "Audit", "N");
                                            }
                                        }
                                        else
                                        {
                                            var withBlock = frmExpenses;
                                            withBlock.GroupVoucher = false;
                                            withBlock.strVoucherType = m_strSysVoucherType;
                                            withBlock.Execute(strSSN, strOrderNumber, m_strSysVoucherType, "Audit", "N");
                                        }

                                        break;
                                    }
                            }

                            InitListViewAudit();
                            LoadListViewAudit();
                        }

                        break;
                    }

                case "To Do":
                    {
                        if (isUsingVoucherLockdown())
                        {
                            if (isVoucherOpen(strSSN, strOrderNumber))
                                return;
                            else
                                gRTSCommands.upd_Orders_VoucherOwner(strSSN, strOrderNumber, gSysUserName);
                        }

                        m_strSysVoucherType = dgvRTS.SelectedRows(0).Cells(4).Value;
                        strTravelType = dgvRTS.SelectedRows(0).Cells(8).Value;

                        switch (m_strSysVoucherType)
                        {
                            case "5":
                                {
                                    if (IsPCSTravelType(strTravelType))
                                    {
                                        {
                                            var withBlock = frmPCSPrecomputed;
                                            // Load(frmPCSPrecomputed)
                                            withBlock.SendPersonnel(strSSN, strOrderNumber);
                                            withBlock.strProcessType = "Computation";
                                            withBlock.strVoucherType = m_strSysVoucherType;
                                            withBlock.SetVoucherType(m_strSysVoucherType);
                                            withBlock.InitForm();
                                            withBlock.ShowDialog();
                                        }
                                    }
                                    else
                                    {
                                        var withBlock = frmVoucherPrecomputed;
                                        withBlock.strVoucherType = m_strSysVoucherType;
                                        withBlock.SetVoucherType(m_strSysVoucherType);
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.InitForm();
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "P":
                                {
                                    {
                                        var withBlock = frmCivPrecomputed;
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.strProcessType = "Computation";
                                        withBlock.strVoucherType = "P";
                                        withBlock.SetVoucherType(m_strSysVoucherType);
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.InitForm();
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "7":
                                {
                                    {
                                        var withBlock = frmVoucherPrecomputed;
                                        withBlock.SetVoucherType(m_strSysVoucherType);
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.InitForm();
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "L":
                                {
                                    {
                                        var withBlock = frmPCSPrecomputed;
                                        withBlock.strProcessType = "Computation";
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.strVoucherType = m_strSysVoucherType;
                                        withBlock.SetVoucherType(m_strSysVoucherType);
                                        withBlock.InitForm();
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "D":
                            case "T":
                            case "M":
                            case "S":
                            case "1":
                                {
                                    {
                                        var withBlock = frmPCSExpenses;
                                        withBlock.strVoucherType = m_strSysVoucherType;
                                        withBlock.strProcessType = "Computation";
                                        withBlock.InitComputation(strSSN, strOrderNumber, m_strSysVoucherType, "Computation");
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "C":
                                {
                                    {
                                        var withBlock = frmCivPCSExpenses;
                                        withBlock.strVoucherType = m_strSysVoucherType;
                                        withBlock.strProcessType = "Computation";
                                        withBlock.strCostCompare = "N";
                                        withBlock.InitComputation(strSSN, strOrderNumber, m_strSysVoucherType, "Computation");
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            case "R":
                                {
                                    {
                                        var withBlock = frmRita;
                                        withBlock.strVoucherType = m_strSysVoucherType;
                                        withBlock.strProcessType = "Computation";
                                        withBlock.strSSN = strSSN;
                                        withBlock.strPrimaryOrder = strOrderNumber;
                                        withBlock.SendPersonnel(strSSN, strOrderNumber);
                                        withBlock.InitForm();
                                        withBlock.ShowDialog();
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (m_strSysVoucherType == "6" & gstrAllowPartialPayment != "Y")
                                    {
                                        Interaction.MsgBox("You have selected a Partial Payment Voucher.  RTS cannot let you continue processing this voucher until you contact your RTS Point of Contact and have this setting changed.", MsgBoxStyle.OkOnly);
                                        return;
                                    }
                                    if (isGroupVoucher(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value))
                                    {
                                        {
                                            var withBlock = frmExpenses;
                                            withBlock.GroupVoucher = true;
                                            withBlock.GroupVoucherID = lngGroupVoucherID;
                                            withBlock.GroupVoucherPrimaryOrder = strGroupVoucherPrimaryOrder;
                                            withBlock.GroupVoucherPrimarySSN = strGroupVoucherPrimarySSN;
                                            withBlock.GroupVoucherCount = lngGroupVoucherCount;
                                            withBlock.Execute(strSSN, strOrderNumber, m_strSysVoucherType, "Computation", "N");
                                        }
                                    }
                                    else
                                    {
                                        var withBlock = frmExpenses;
                                        withBlock.GroupVoucher = false;
                                        withBlock.Execute(strSSN, strOrderNumber, m_strSysVoucherType, "Computation", "N");
                                    }

                                    break;
                                }
                        }

                        break;
                    }

                case "History":
                    {
                        if (IsDBNull(dgvRTS.SelectedRows(0).Cells(7).Value))
                            dteBusinessDate = new DateTime(1900, 1, 1);
                        else
                            dteBusinessDate = (DateTime)Format(dgvRTS.SelectedRows(0).Cells(7).Value, "yyyy/MM/dd");

                        strVoucherNumber = Trim(dgvRTS.SelectedRows(0).Cells(6).Value);
                        m_strSysVoucherType = Trim(dgvRTS.SelectedRows(0).Cells(15).Value);

                        if (hasData(VoucherIsInDatabase(dteBusinessDate, Strings.Trim(strVoucherNumber))))
                        {
                            if (CreateOPLOCFolderForBusinessDate(dteBusinessDate) != SUCCESS)
                            {
                                Interaction.MsgBox("Cannot Create the folder to print the vouchers, Processing aborted", Constants.vbCritical);
                                return;
                            }
                            else
                            {
                                // If DB data exists,
                                dtVoucherData = gRTSQueries.sel_VoucherArchive_All(strVoucherNumber, dteBusinessDate);
                                // write from DB
                                ArchiveOPLOCFromDatabase(dteBusinessDate, strVoucherNumber, dtVoucherData);
                            }
                        }
                        else if (Trim(dgvRTS.SelectedRows(0).Cells(3).Value) != "Incomplete" & Trim(dgvRTS.SelectedRows(0).Cells(3).Value) != "Ready for EFT disbursement")
                            Interaction.MsgBox("Voucher: " + strVoucherNumber + " is missing. To view this voucher copy you must rearchive vouchers for this Business date.", Constants.vbOKOnly);

                        if (File.Exists(getVoucherPathName(dteBusinessDate, strVoucherNumber, VoucherDestination.Other)))
                        {
                            {
                                var withBlock = frmVoucherHistory;
                                withBlock.SSN = strSSN;
                                withBlock.VoucherNumber = strVoucherNumber;
                                withBlock.BusinessDate = dteBusinessDate;
                                withBlock.Execute();
                                withBlock.ShowDialog();

                                DeleteAllTempVouchers(dteBusinessDate);
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Interim" | dgvRTS.SelectedRows(0).Cells(1).Value == "Advance" | dgvRTS.SelectedRows(0).Cells(1).Value == "Voided" | dgvRTS.SelectedRows(0).Cells(1).Value == "Manual Voucher")
                        {
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "PPM")
                        {
                            {
                                var withBlock = frmPCSExpenses;
                                withBlock.mstrVoucherNumberDeducted = strVoucherNumber;
                                withBlock.mdatBusinessDateDeducted = (DateTime)dteBusinessDate;
                                withBlock.InitComputation(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "D", "Computation");

                                if (Strings.Trim(strVoucherNumber) != "")
                                    withBlock.PreviewDITYReport(true);
                                else
                                    withBlock.PreviewDITYReport(false);
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "PPM Supplemental")
                        {
                            {
                                var withBlock = frmPCSExpenses;
                                withBlock.mstrVoucherNumberDeducted = strVoucherNumber;
                                withBlock.mdatBusinessDateDeducted = (DateTime)dteBusinessDate;
                                withBlock.InitComputation(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "S", "Computation");

                                if (Strings.Trim(strVoucherNumber) != "")
                                    withBlock.PreviewPPMSUPPReport(true);
                                else
                                    withBlock.PreviewPPMSUPPReport(false);
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Temporary Lodging Expense - TLE")
                        {
                            {
                                var withBlock = frmPCSExpenses;
                                withBlock.mstrVoucherNumberDeducted = strVoucherNumber;
                                withBlock.mdatBusinessDateDeducted = (DateTime)dteBusinessDate;
                                withBlock.InitComputation(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "T", "Computation");
                                withBlock.PrintTLEReport(true);
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Military PCS")
                        {
                            {
                                var withBlock = frmPCSExpenses;
                                withBlock.mstrVoucherNumberDeducted = strVoucherNumber;
                                withBlock.mdatBusinessDateDeducted = (DateTime)dteBusinessDate;
                                withBlock.InitComputation(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "M", "Computation");

                                if (Strings.Trim(strVoucherNumber) != "")
                                    withBlock.PrintTLEReport(true);
                                else
                                    withBlock.PrintTLEReport(false);
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Collection")
                        {
                            {
                                var withBlock = frmVoucherCashCollect;
                                withBlock.GenerateCashCollectionReport(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, dgvRTS.SelectedRows(0).Cells(7).Value); // lvwRTS.Items(intItemSelected).SubItems(5).Text)
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Civilian PCS")
                        {
                            m_cCivPCSReport = new clsCivPCSReport();

                            {
                                var withBlock = m_cCivPCSReport;
                                if (Strings.Trim(strVoucherNumber) != "")
                                {
                                    withBlock.FromHistory = true;
                                    withBlock.VoucherNumberDeducted = strVoucherNumber;
                                    withBlock.BusinessDateDeducted = (DateTime)dteBusinessDate;
                                }
                                else
                                    withBlock.FromHistory = false;

                                withBlock.m_SSN = strSSN;
                                withBlock.m_OrderNumber = dgvRTS.SelectedRows(0).Cells(0).Value;
                                withBlock.m_strCostCompare = "N";
                                withBlock.bPreview = true;
                                withBlock.GetReports();
                            }

                            m_cCivPCSReport = null;
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Civilian RITA")
                        {
                            {
                                var withBlock = frmRita;
                                withBlock.strVoucherType = "RITA";
                                withBlock.strProcessType = "Computation";
                                withBlock.strSSN = strSSN;
                                withBlock.strPrimaryOrder = dgvRTS.SelectedRows(0).Cells(0).Value;
                                withBlock.SendPersonnel(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value);
                                withBlock.InitForm();
                                withBlock.Compute();
                            }
                        }
                        else if (dgvRTS.SelectedRows(0).Cells(1).Value == "Civilian PCS - Precomputed")
                        {
                            m_cCivPCSReport = new clsCivPCSReport();

                            {
                                var withBlock = m_cCivPCSReport;
                                if (Strings.Trim(strVoucherNumber) != "")
                                {
                                    withBlock.FromHistory = true;
                                    withBlock.VoucherNumberDeducted = strVoucherNumber;
                                    withBlock.BusinessDateDeducted = (DateTime)dteBusinessDate;
                                }
                                else
                                    withBlock.FromHistory = false;

                                withBlock.m_SSN = strSSN;
                                withBlock.m_OrderNumber = dgvRTS.SelectedRows(0).Cells(0).Value;
                                withBlock.m_strCostCompare = "N";
                                withBlock.bPreview = true;
                                withBlock.GetReports();
                            }

                            m_cCivPCSReport = null;
                        }
                        else
                        {
                            dtItin = gRTSQueries.sel_Itinerary_SSN_PrimaryOrder(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "N");

                            DataRow[] foundRows = dtItin.Select("", "TravelDate DESC");

                            if (hasData(foundRows))
                            {
                                if (foundRows[0]("IDL").ToString() == "E")
                                {
                                    strLastDayLocation = foundRows[0]("TravelLocation").ToString();

                                    if (foundRows.Length > 1)
                                    {
                                        if (strLastDayLocation != Trim(foundRows[1]("TravelLocation").ToString()))
                                        {
                                            if (isAreaID(strLastDayLocation) == "O")
                                            {
                                                if (Trim(isIBPCode(strLastDayLocation)) != "")
                                                {
                                                    Interaction.MsgBox("You will not be able to open this computation sheet from History.  It can only be opened by going into the voucher from Process/Vouchers");
                                                    strVoucherNumberDeducted = "";
                                                    dteBusinessDateDeducted = new DateTime(1900, 1, 1);
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            gRTSCommands.Compute_Voucher(strSSN, dgvRTS.SelectedRows(0).Cells(0).Value, "N", "N", "Y");

                            if (Strings.Trim(strVoucherNumber) != "")
                            {
                                strVoucherNumberDeducted = strVoucherNumber;
                                dteBusinessDateDeducted = (DateTime)dteBusinessDate;
                                PreviewReport(strSSN, dgvRTS.Rows(intItemSelected).Cells(0).Value, m_strSysVoucherType, "N", true);
                            }
                            else
                                PreviewReport(strSSN, dgvRTS.Rows(intItemSelected).Cells(0).Value, m_strSysVoucherType, "N", false);
                        }

                        break;
                    }
            }

            RefreshDataGrid();
        }
    }
    catch (Exception ex)
    {
        ErrHandler.WriteError(ex.Message + Constants.vbCrLf + "Error in: " + this.GetType().Name + ".dgvRTS_CellMouseDoubleClick() - " + ex.Source);
        Interaction.MsgBox(ex.Message);
    }
    finally
    {
        if (!dtItin == null)
            dtItin = null/* TODO Change to default(_) if this is not a reference type */;
        if (!dtDity == null)
            dtDity = null/* TODO Change to default(_) if this is not a reference type */;
        this.Cursor = Cursors.Default;
    }
}
